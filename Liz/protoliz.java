/*          _____                    _____                _____                    _____                   /\    \                  /\    \              /\    \                  /\    \                 /::\    \                /::\    \            /::\    \                /::\    \               /::::\    \              /::::\    \           \:::\    \              /::::\    \             /::::::\    \            /::::::\    \           \:::\    \            /::::::\    \           /:::/\:::\    \          /:::/\:::\    \           \:::\    \          /:::/\:::\    \         /:::/__\:::\    \        /:::/__\:::\    \           \:::\    \        /:::/__\:::\    \       /::::\   \:::\    \      /::::\   \:::\    \          /::::\    \      /::::\   \:::\    \     /::::::\   \:::\    \    /::::::\   \:::\    \        /::::::\    \    /::::::\   \:::\    \   /:::/\:::\   \:::\ ___\  /:::/\:::\   \:::\    \      /:::/\:::\    \  /:::/\:::\   \:::\    \ /:::/__\:::\   \:::|    |/:::/__\:::\   \:::\____\    /:::/  \:::\____\/:::/  \:::\   \:::\____\\:::\   \:::\  /:::|____|\:::\   \:::\   \::/    /   /:::/    \::/    /\::/    \:::\  /:::/    / \:::\   \:::\/:::/    /  \:::\   \:::\   \/____/   /:::/    / \/____/  \/____/ \:::\/:::/    /   \:::\   \::::::/    /    \:::\   \:::\    \      /:::/    /                    \::::::/    /     \:::\   \::::/    /      \:::\   \:::\____\    /:::/    /                      \::::/    /       \:::\  /:::/    /        \:::\   \::/    /    \::/    /                       /:::/    /         \:::\/:::/    /          \:::\   \/____/      \/____/                       /:::/    /           \::::::/    /            \:::\    \                                       /:::/    /             \::::/    /              \:::\____\                                     /:::/    /               \::/    /                \::/    /                                     \::/    /                 \/____/                  \/____/                                       \/____/         */import java.awt.Color;import java.awt.Container;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Image;import java.awt.Insets;import java.awt.Point;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.image.BufferedImage;import java.awt.image.RenderedImage;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.lang.reflect.Method;import java.net.Socket;import java.net.URL;import javax.imageio.ImageIO;import javax.swing.DefaultComboBoxModel;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JComboBox;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JProgressBar;import javax.swing.JScrollPane;import javax.swing.JSlider;import javax.swing.JTabbedPane;import javax.swing.JTextField;import javax.swing.JTextPane;import javax.swing.SwingConstants;import javax.swing.WindowConstants;import javax.swing.border.CompoundBorder;import javax.swing.border.EmptyBorder;import javax.swing.border.TitledBorder;import org.rsbot.event.events.MessageEvent;import org.rsbot.event.listeners.MessageListener;import org.rsbot.event.listeners.PaintListener;import org.rsbot.script.Script;import org.rsbot.script.ScriptManifest;import org.rsbot.script.methods.Skills;import org.rsbot.script.wrappers.RSArea;import org.rsbot.script.wrappers.RSGroundItem;import org.rsbot.script.wrappers.RSObject;import org.rsbot.script.wrappers.RSTile;@ScriptManifest(authors = { "l3eta" }, keywords = {"Fuck Cows Not Chickens x]"}, name = "ProtoLiz", version = 4.045, description = "l3eta has been busy D:")		public class protoliz extends Script implements PaintListener, MessageListener {		RSTile[] t1l = { new RSTile(3501, 3490), new RSTile(3507, 3503), new RSTile(3521, 3498), new RSTile(3525, 3487), new RSTile(3527, 3476), new RSTile(3520, 3464), new RSTile(3519, 3452), new RSTile(3528, 3442), new RSTile(3536, 3448)};	RSTile[] t1b = { new RSTile(3525, 3440), new RSTile(3519, 3450), new RSTile(3520, 3464), new RSTile(3526, 3475), new RSTile(3524, 3488), new RSTile(3522, 3502), new RSTile(3509, 3505), new RSTile(3500, 3494), new RSTile(3504, 3482), new RSTile(3510, 3480)};	RSTile[] t2l = { new RSTile(3501, 3490), new RSTile(3507, 3503), new RSTile(3521, 3498), new RSTile(3525, 3487), new RSTile(3527, 3476), new RSTile(3520, 3464), new RSTile(3519, 3452), new RSTile(3528, 3442), new RSTile(3536, 3448), new RSTile(3543, 3450), new RSTile(3551, 3450)};	RSTile[] t2b = { new RSTile(3542, 3450), new RSTile(3531, 3445), new RSTile(3520, 3449), new RSTile(3520, 3461), new RSTile(3524, 3474), new RSTile(3524, 3486), new RSTile(3522, 3497), new RSTile(3516, 3510), new RSTile(3507, 3503), new RSTile(3501, 3492), new RSTile(3505, 3485), new RSTile(3510, 3480)};	RSTile[] t3l = { new RSTile(3502, 3489), new RSTile(3504, 3500), new RSTile(3517, 3502), new RSTile(3522, 3492), new RSTile(3525, 3483), new RSTile(3527, 3474), new RSTile(3522, 3464), new RSTile(3518, 3454), new RSTile(3519, 3442), new RSTile(3529, 3442), new RSTile(3539, 3449), new RSTile(3548, 3450), new RSTile(3558, 3453), new RSTile(3569, 3454), new RSTile(3565, 3446), new RSTile(3561, 3436), new RSTile(3549, 3440)};	RSTile[] t3b = { new RSTile(3557, 3437), new RSTile(3563, 3443), new RSTile(3572, 3440), new RSTile(3580, 3445), new RSTile(3575, 3452), new RSTile(3566, 3454), new RSTile(3556, 3453), new RSTile(3545, 3450), new RSTile(3534, 3448), new RSTile(3522, 3440), new RSTile(3519, 3449), new RSTile(3519, 3462), new RSTile(3524, 3470), new RSTile(3525, 3477), new RSTile(3522, 3488), new RSTile(3521, 3501), new RSTile(3515, 3511), new RSTile(3508, 3504), new RSTile(3500, 3492), new RSTile(3502, 3484), new RSTile(3511, 3480)};		RSArea ta1t2 = new RSArea(new RSTile(3531, 3444), new RSTile(3539, 3446)), ta2t2 = new RSArea(new RSTile(3547, 3448), new RSTile(3554, 3451));	RSArea ta1 = new RSArea(new RSTile(3531, 3444), new RSTile(3539, 3452)), ta2 = new RSArea(new RSTile(3547, 3448), new RSTile(3556, 3454)), ta3 = new RSArea(new RSTile(3546, 3436), new RSTile(3550, 3443));	RSArea traparea = null;	RSTile[] bankpath = null, lizardpath = null;	RSArea bankarea = new RSArea(new RSTile(3509, 3483), new RSTile(3515, 3474));	int[] food = {15272, 385, 7946, 373, 365, 379, 361};	int ic, trapcount = 2, ca, tr, started = 0, chp = 0;	int count, tb = 0, startExp, startLevel, price;		int hp = 0, paint = 0, mo = 0;	long start;	String status = "START IN BANK";	boolean ph = false, three, pw = false, eat = false;				Image chat = loadImage("chat");	Image inv = loadImage("inv");		client client = new client();	kk proto = new kk();		controlpanel maingui = new controlpanel();		dialog message = new dialog();		@SuppressWarnings("deprecation")	public int loop()	{		if(pw == true && inventory.isFull() && traparea.contains(getMyPlayer().getLocation())) { dropMethod(); }		try { chp = Integer.parseInt(interfaces.get(748).getComponent(8).getText()); } catch(NumberFormatException ex) { }				ic = inventory.getCount(10149);		if(!getMyPlayer().isMoving() && traparea.contains(getMyPlayer().getLocation()))		{			if(tr == 3)			{				if(getMyPlayer().getLocation().getX() == 3546 && getMyPlayer().getLocation().getY() == 3442 || getMyPlayer().getLocation().getX() == 3549 && getMyPlayer().getLocation().getY() == 3438)				{					if(calc.tileOnScreen(new RSTile(3548, 3440)))					{						if(!getMyPlayer().isMoving() && !inventory.isFull())						{							tiles.doAction(new RSTile(3548, 3440), "Walk");							sleep(750);						}					} else {						if(!getMyPlayer().isMoving() && !inventory.isFull())						{							walking.walkTo(new RSTile(3548, 3440));							sleep(750);						}									}				}			}			if(tr == 2) 			{				if(getMyPlayer().getLocation().getX() == 3548 && getMyPlayer().getLocation().getY() == 3449 || getMyPlayer().getLocation().getX() == 3551 && getMyPlayer().getLocation().getY() == 3450 || getMyPlayer().getLocation().getX() == 3555 && getMyPlayer().getLocation().getY() == 3453)						{					if(calc.tileOnScreen(new RSTile(3551, 3451)))					{						if(!getMyPlayer().isMoving() && !inventory.isFull())						{							tiles.doAction(new RSTile(3551, 3451), "Walk");							sleep(750);						}									} else {						if(!getMyPlayer().isMoving() && !inventory.isFull())						{							walking.walkTo(new RSTile(3551, 3451));							sleep(750);						}					}				}			}			if(tr == 1)			{				if(getMyPlayer().getLocation().getX() == 3537 && getMyPlayer().getLocation().getY() == 446 || getMyPlayer().getLocation().getX() == 3533 && getMyPlayer().getLocation().getY() == 3446 || getMyPlayer().getLocation().getX() == 3538 && getMyPlayer().getLocation().getY() == 3451)						{					if(calc.tileOnScreen(new RSTile(3536, 3448)))					{						if(!getMyPlayer().isMoving() && !inventory.isFull())						{							tiles.doAction(new RSTile(3536, 3448), "Walk");							sleep(750);						}									} else {						if(!getMyPlayer().isMoving() && !inventory.isFull())						{							walking.walkTo(new RSTile(3536, 3448));							sleep(750);						}					}				}			}		}				if(!getMyPlayer().isMoving() && pw == false && (getMyPlayer().getLocation() == new RSTile(3536, 3448) || getMyPlayer().getLocation() == new RSTile(3551, 3451) || getMyPlayer().getLocation() == new RSTile(3548, 3440)))		{			RSGroundItem rope = groundItems.getNearest(954);			RSGroundItem net = groundItems.getNearest(303);							if (rope != null && !inventory.isFull())			{				if(traparea.contains(rope.getLocation()))				{					status = "Getting Failed Trap.";					camera.turnToTile(rope.getLocation());					sleep(50);					rope.doAction("Take");										sleep(750);				}			} else if (net != null && !inventory.isFull()) {				if(traparea.contains(net.getLocation()))				{					status = "Getting Failed Trap.";					camera.turnToTile(net.getLocation());					sleep(50);					net.doAction("Take");										sleep(750);				}			} else {				ab();			}		}				if(!walking.isRunEnabled())		{			if(walking.getEnergy() >= 35)			{				walking.setRun(true);				sleep(75);			}		} else if(walking.isRunEnabled()) { /* Do Nothing */ }				if(bankarea.contains(getMyPlayer().getLocation()) && inventory.contains(303) && inventory.contains(954) && !traparea.contains(getMyPlayer().getLocation()) && !inventory.isFull()			|| !bankarea.contains(getMyPlayer().getLocation()) && inventory.contains(303) && inventory.contains(954) && !traparea.contains(getMyPlayer().getLocation()) && !inventory.isFull())		{			if(inventory.getCount(303) == trapcount && inventory.getCount(954) == trapcount)			{				walkTL();			} else {				bankfix();			}		}		if(bankarea.contains(getMyPlayer().getLocation()) && inventory.isFull()) { bankmethod(); }		if(traparea.contains(getMyPlayer().getLocation()) && inventory.isFull() || !traparea.contains(getMyPlayer().getLocation()) && inventory.isFull())		{			if(ph == true)			{				pw = true;							} else if (ph == false) {				walkTB();			}		}		if(traparea.contains(getMyPlayer().getLocation())  && inventory.contains(303) && inventory.contains(954) && !inventory.isFull() 			|| traparea.contains(getMyPlayer().getLocation()) && !inventory.contains(303) && !inventory.contains(954) && !inventory.isFull()			|| traparea.contains(getMyPlayer().getLocation()) && !inventory.contains(303) && inventory.contains(954) && !inventory.isFull()			|| traparea.contains(getMyPlayer().getLocation()) && inventory.contains(303) && !inventory.contains(954) && !inventory.isFull())		{			RSGroundItem rope = groundItems.getNearest(954);			RSGroundItem net = groundItems.getNearest(303);			if (rope != null && !inventory.isFull())			{				if(traparea.contains(rope.getLocation()))				{					status = "Getting Failed Trap.";					camera.turnToTile(rope.getLocation());					sleep(50);					rope.doAction("Take");										sleep(750);				}			} else if(net != null && !inventory.isFull()) {				if(traparea.contains(net.getLocation()))				{					status = "Getting Failed Trap.";					camera.turnToTile(net.getLocation());					sleep(50);					net.doAction("Take");										sleep(750);				}			} else {				trapmethod();			}		}		return random(100, 200);	}		public void bankfix()	{		if(three == true)		{			if(inventory.getCount(303) != 3 && inventory.getCount(954) != 3)			{				if(!bank.isOpen()) { bank.open(); }				if(bank.isOpen())				{					if(inventory.getCount() > 1) { bank.depositAll(); }							sleep(250);					bank.getItem(954).doClick(true);					bank.getItem(954).doClick(true);					bank.getItem(954).doClick(true);					sleep(500);					bank.getItem(303).doClick(true);					bank.getItem(303).doClick(true);					bank.getItem(303).doClick(true);					sleep(500);					if(inventory.getCount(303) == 3 && inventory.getCount(954) == 3) { bank.close(); }				}			}		} else if(three == false)  {			if(inventory.getCount(303) != 2 && inventory.getCount(954) != 2)			{				if(!bank.isOpen()) { bank.open(); }				if(bank.isOpen())				{					if(inventory.getCount() > 1) { bank.depositAll(); }						sleep(250);					bank.getItem(303).doClick(true);					bank.getItem(303).doClick(true);										sleep(500);					bank.getItem(954).doClick(true);					bank.getItem(954).doClick(true);					sleep(500);					if(inventory.getCount(303) == 2 && inventory.getCount(954) == 2) { bank.close(); }				}			}		}	}	public void dropMethod()	{		while(inventory.contains(10149))		{			inventory.dropAllExcept(303, 954);		}				pw = false;	}	public void trapmethod()	{		RSObject t = objects.getNearest(19679);		RSObject tc = objects.getNearest(19675);		RSObject ts = objects.getNearest(19678);		if(three == false)		{			if(traparea.contains(getMyPlayer().getLocation()) && !inventory.isFull() && pw  == false)			{						if(ca == 0)				{					camera.setPitch(3072);					ca = 1;				}				if(ic == 25)				{					inventory.getItem(10149).doAction("Release");				}				if(ic == 23 && inventory.getCount(303) == 1 && inventory.getCount(954) == 1)				{						if(tc != null) 					{						if(traparea.contains(tc.getLocation()))						{														tc.doAction("Check");							status = "Checking Trap.";							sleep(random(600, 750));														}					}				}				if(ic == 23 && inventory.getCount(303) == 2 && inventory.getCount(954) == 2)				{						if(t != null && inventory.contains(303) && inventory.contains(954) && !inventory.isFull())					{						if(traparea.contains(t.getLocation()))						{							status = "Setting Trap.";							t.doAction("Set-trap");							sleep(random(1500,1600));							}					}				}				if(ic == 24)				{					if(ts != null) 					{						if(traparea.contains(ts.getLocation()))						{												ts.doAction("Dismantle");							sleep(random(600, 750));						}					} else if(tc != null) {						if(traparea.contains(tc.getLocation()))						{							inventory.getItem(10149).doAction("Release");												tc.doAction("Check");							status = "Checking Trap.";							sleep(random(600, 750));						}					}				}				if(ic <= 23 )				{					if(t != null && inventory.contains(303) && inventory.contains(954) && !inventory.isFull())					{						if(traparea.contains(t.getLocation()))						{							status = "Setting Trap.";							t.doAction("Set-trap");							sleep(random(1500,1600));							}					}					if(tc != null && !inventory.isFull())					{						if(traparea.contains(tc.getLocation()))						{												tc.doAction("Check");							status = "Checking Trap.";							sleep(random(600, 750));													}										}				}			}		} else if(three == true) {						if(ic == 23)			{				inventory.getItem(10149).doAction("Release");			}			if(ic == 20 && inventory.getCount(303) == 1 && inventory.getCount(954) == 1)			{								if(tc != null)				{						if(traparea.contains(tc.getLocation()))					{											tc.doAction("Check");						status = "Checking Trap.";						sleep(random(600, 750));												}				}			}			if(ic == 20 && inventory.getCount(303) == 2 && inventory.getCount(954) == 2)			{								if(t != null && inventory.contains(303) && inventory.contains(954) && !inventory.isFull())				{						if(traparea.contains(t.getLocation()))					{							status = "Setting Trap.";						t.doAction("Set-trap");												sleep(random(1500,1600));						}				}			}			if(ic == 21 && inventory.getCount(303) == 1 && inventory.getCount(954) == 1)			{				if(tc != null)				{						if(traparea.contains(tc.getLocation()))					{						tc.doAction("Check");						status = "Checking Trap.";						sleep(random(600, 750));												}				} else if(ts != null) { } else {					if(t != null && inventory.contains(303) && inventory.contains(954) && !inventory.isFull())					{							if(traparea.contains(t.getLocation()))						{								status = "Setting Trap.";							t.doAction("Set-trap");													sleep(random(1500,1600));							}					}				}			} else if(ic == 21 && inventory.getCount(303) == 2 && inventory.getCount(954) == 2) {				if(tc != null)				{					if(traparea.contains(tc.getLocation()))					{						tc.doAction("Check");						status = "Checking Trap.";						sleep(random(600, 750));					}														}			} else if(ic == 21 && inventory.getCount(303) == 3 && inventory.getCount(954) == 3) {				if(t != null && inventory.contains(303) && inventory.contains(954) && !inventory.isFull())				{					if(traparea.contains(t.getLocation()))					{						status = "Setting Trap.";						t.doAction("Set-trap");						sleep(random(1500,1600));					}				}			}			if(ic == 22 && inventory.getCount(303) == 2 && inventory.getCount(954) == 2)			{				if(tc != null)				{						if(traparea.contains(tc.getLocation()))					{						inventory.getItem(10149).doAction("Release");						tc.doAction("Check");						status = "Checking Trap.";						sleep(random(600, 750));					}									}				if(ts != null)				{					if(traparea.contains(ts.getLocation()))					{						ts.doAction("Dismantle");						status = "Dismantling Trap.";						sleep(random(600, 750));					}				}			}			if(ic <= 20)			{				if(t != null && inventory.contains(303) && inventory.contains(954) && !inventory.isFull())				{					if(traparea.contains(t.getLocation()))					{						status = "Setting Trap.";						t.doAction("Set-trap");						sleep(random(1500,1600));					}				}				if(tc != null)				{						if(traparea.contains(tc.getLocation()))					{						tc.doAction("Check");						status = "Checking Trap.";						sleep(random(600, 750));													}				}			} 					}			}	@SuppressWarnings("deprecation")	public void walkTB()	{		status = "Walking To Bank.";    	if(traparea.contains(getMyPlayer().getLocation()) && inventory.isFull() || !traparea.contains(getMyPlayer().getLocation()) && inventory.isFull())        {    		RSTile arstile[] = walking.randomizePath(bankpath, 2, 2);    		if(calc.distanceTo(walking.getDestination()) <= 5)    		{    			walking.walkPathMM(arstile, 15);    			sleep(500, 750);    			cab();    		}        }    }	public void takeFood()	{		if(bank.isOpen())		{			for(int i : food)			{								if(bank.getItem(i) != null)				{										log("Taking one of " + bank.getItem(i).getName() + " to heal you :)");					bank.getItem(i).doClick(true);					bank.getItem(i).doClick(true);					bank.getItem(i).doClick(true);					eatFood();				}			}		}	}	public void eatFood()	{		if(bank.isOpen())		{			bank.close();		}		if(!bank.isOpen() && inventory.containsOneOf(food))		{						if(inventory.containsOneOf(food))			{				while(inventory.containsOneOf(food))				{					inventory.getItem(food).doClick(true);					sleep(500);				}				sleep(100);				}		}	}	public void bankmethod()	{		if(bankarea.contains(getMyPlayer().getLocation()) && inventory.isFull())    	{    		status = "Depositing Lizards.";    		if(!bank.isOpen()) { bank.open(); }    		if(bank.isOpen())    		{    			bank.depositAllExcept(303, 954);    			sleep(250);    			ca = 0;        		tb++;        		if(eat == true)        		{        			if(chp <= (hp / 2))        			{			        				takeFood();        			} else {        				bank.close();         			}        		} else {        			bank.close();         		}    		}    	}	}	@SuppressWarnings("deprecation")            public void walkTL()    {      	status = "Walking To Lizards.";    	if(bankarea.contains(getMyPlayer().getLocation()) && inventory.contains(303) && inventory.contains(954) || !bankarea.contains(getMyPlayer().getLocation())  && inventory.contains(303) && inventory.contains(954))        {    		walking.walkPathMM(lizardpath);    		RSTile arstile[] = walking.randomizePath(lizardpath, 2, 2);            if(calc.distanceTo(walking.getDestination()) <= 5)            {               	walking.walkPathMM(arstile, 15);               	sleep(500, 600);               	cab();            }        }    }	public void onFinish()	{		if(started == 0) {			log.severe("Failed To Start UP -- GUI Closed");		} else {			long millis = System.currentTimeMillis() - start, hours = millis / (1000 * 60 * 60);			millis -= hours * (1000 * 60 * 60);			long minutes = millis / (1000 * 60);			millis -= minutes * (1000 * 60);			long seconds = millis / 1000;								log("-> Finishing Some Things.");					log("-> Runtime:" + hours + " Hours, " + minutes + " Minutes, " + seconds +  " Seconds.");					checkversion();			if(maingui.isVisible()) { maingui.dispose(); }			if(client.isConnected == true) { client.disconnect(); }						log("-> Done -- Closing Script");		}			}	public Image loadImage(String name) { try {return ImageIO.read(new URL("http://l3eta.com/scripts/protoliz/images/" + name + ".png")); } catch (IOException e) { } return null; }	public void onRepaint(Graphics g) 	{				if(game.isLoggedIn() && isRunning() && started == 1)		{			long time = System.currentTimeMillis() - start;				g.setColor(Color.white);			g.drawLine(mouse.getLocation().x - 14, mouse.getLocation().y, mouse.getLocation().x + 14, mouse.getLocation().y);			g.drawLine(mouse.getLocation().x, mouse.getLocation().y - 14, mouse.getLocation().x, mouse.getLocation().y +14);			g.setColor(Color.black);			g.drawOval(mouse.getLocation().x - 7, mouse.getLocation().y - 7, 14, 14);		    g.drawLine(mouse.getLocation().x - 1000, mouse.getLocation().y, mouse.getLocation().x - 7, mouse.getLocation().y);			g.drawLine(mouse.getLocation().x + 1000, mouse.getLocation().y, mouse.getLocation().x + 7, mouse.getLocation().y);		    g.drawLine(mouse.getLocation().x, mouse.getLocation().y - 1000, mouse.getLocation().x, mouse.getLocation().y - 7);			g.drawLine(mouse.getLocation().x, mouse.getLocation().y + 1000, mouse.getLocation().x, mouse.getLocation().y + 7);									int xptolvl = skills.getExpToNextLevel(21);			int xpgained = skills.getCurrentExp(21) - startExp;			count = (skills.getCurrentExp(21) - startExp) / 152;						int w = (int) Math.round(((count * price) * 3600000D /(System.currentTimeMillis() - start)));			int x = (int) Math.round((count * 3600000D /(System.currentTimeMillis() - start)));			int y = (int) Math.round((xpgained * 3600000D /(System.currentTimeMillis() - start)));						long z = (long) ((double) xptolvl / (double) y * 3600000);			if(paint == 0)			{					g.drawImage(chat, 6, 344, null);			        g.setFont(new Font("Arial", 1, 12));			        g.setColor(Color.white);			        			        g.drawString("Status: " + status, 23, 375);			        g.drawString("RunTime: " + f(time), 23, 390);			        g.drawString("Banked: " + tb + " Times.", 23, 405);				        g.drawString("Hunter Level: " + skills.getCurrentLevel(21), 23, 428);			        g.drawString("Levels Gained: " + (skills.getCurrentLevel(21) - startLevel), 23, 443);			       			        if(xpgained == 0) {g.drawString("Time To " + (skills.getCurrentLevel(21) + 1) + ": 00:00:00", 23, 458); } else { g.drawString("Time To " + (skills.getCurrentLevel(21) + 1) + ": " + f(z), 23, 458);}			        			        g.drawString("Lizard Price: " + price, 180, 375);			        g.drawString("Money Gained: " + count * price , 180, 390);			        g.drawString("Money Hour: " + w, 180, 405);			        g.drawString("Lizards Caught: " + count, 180, 428);			        g.drawString("Lizards Hourly: " + x, 180, 443);			        g.drawString("Lizards Til "+ (skills.getCurrentLevel(21) + 1) + ": " + skills.getExpToNextLevel(21) / 152, 180, 458);			        			        			        			        			        g.drawString("Xp Gained: " + xpgained, 325, 375);			        g.drawString("Xp Til " + (skills.getCurrentLevel(21) + 1)  + ": " + xptolvl, 325, 390);			        g.drawString("Xp Hourly: " + y, 325, 405);			       			        g.drawString("Paint By: Popm4n, l3eta", 325, 443);			        g.drawString("Protoliz By: l3eta", 325, 458);			        g.drawString("Script Verison: " + protoliz.class.getAnnotation(ScriptManifest.class).version(), 325, 428);			        			        			} else if(paint == 1) {									g.drawImage(inv, 547, 204, null);			        g.setFont(new Font("Miriam", 0, 13));			        g.setColor(Color.white);			        g.drawString("Lizards Caught: " + count, 560, 360);			        g.drawString("Lizards Hourly: " + x, 560, 370);			        g.drawString("Status: " + status, 560, 240);			        g.drawString("RunTime: " + f(time), 560, 250);			        g.drawString("Banked: " + tb + " Times.", 560, 260);			        g.drawString("Lizard Price: " + price, 560, 280);			        g.drawString("Cash Gained: " + count * price, 560, 290);			        g.drawString("Cash Hourly: " + w, 560, 300);			        g.drawString("Xp Gained: " + xpgained, 560, 320);			        g.drawString("Xp Hourly: " + y, 560, 330);			        g.drawString("Xp Til " + (skills.getCurrentLevel(21) + 1)  + ": " + xptolvl, 560, 340);			        g.drawString("Lizards Til "+ (skills.getCurrentLevel(21) + 1) + ": " + skills.getExpToNextLevel(21) / 152, 560, 381);			        g.drawString("Hunter Level: " + skills.getCurrentLevel(21), 560, 400);			        g.drawString("Levels Gained: " + (skills.getCurrentLevel(21) - startLevel), 560, 410);			        if(xpgained == 0) {			        	g.drawString("Time To " + (skills.getCurrentLevel(21) + 1) + ": 00:00:00", 560, 420);					} else {						g.drawString("Time To " + (skills.getCurrentLevel(21) + 1) + ": " + f(z), 560, 420);					}			       			        g.drawString("Version: " + protoliz.class.getAnnotation(ScriptManifest.class).version(), 560, 440);			        g.drawString("Paint By: Popm4n, l3eta", 560, 450);				}			if(maingui.isVisible()) 			{				maingui.bank.setText("Banked: " + tb + " Times.");				maingui.runtime.setText("Runtime: " + f(time));				maingui.status.setText("Status: " + status); 								maingui.level.setText("Current Level: " + skills.getCurrentLevel(21));				maingui.levels.setText("Levels Gained: " + (skills.getCurrentLevel(21) - startLevel));				if(xpgained == 0)				{					maingui.timetolvl.setText("Time To " + (skills.getCurrentLevel(21) + 1) + ": 00:00:00");				} else {					maingui.timetolvl.setText("Time To " + (skills.getCurrentLevel(21) + 1) + ": " + f(z));				}												maingui.lizardstolevel.setText("Lizards Til "+ (skills.getCurrentLevel(21) + 1) + ": " + skills.getExpToNextLevel(21) / 152);				maingui.count.setText("Lizards Caught: " + count);				maingui.lizhr.setText("Lizards Per Hr: " + x);								maingui.xptolvl.setText("XP Til " + (skills.getCurrentLevel(21) + 1)  + ": " + xptolvl);				maingui.xpgained.setText("XP Gained: " + xpgained);				maingui.xphr.setText("XP Per HR: " + y);								maingui.price.setText("Lizard Price: " + price);				maingui.moneygained.setText("Money Gained: " + count * price);				maingui.moneyhr.setText("Money Hourly: " + w);								maingui.precent.setValue(skills.getPercentToNextLevel(21));			}	       		}	}	private String f(final long time) {final int sec = (int) (time / 1000), h = sec / 3600, m = sec / 60 % 60, s = sec % 60;return (h < 10 ? "0" + h : h) + ":" + (m < 10 ? "0" + m : m) + ":" + (s < 10 ? "0" + s : s);}	private boolean checkversion() 	{        try {        	String ver = "";        	URL url = new URL("http://l3eta.com/scripts/protoliz/version.file");            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));            String line;            while ((line = in.readLine()) != null)             {                ver = line;            }            if(Double.parseDouble(ver) < 0)             {                in.close();                log(Color.red, "-> Unable to find the new version - update failed");                return false;            }            if(protoliz.class.getAnnotation(ScriptManifest.class).version() == Double.parseDouble(ver))             {                in.close();                log(Color.gray, "-> You have the latest script version");                return false;            }                        if(protoliz.class.getAnnotation(ScriptManifest.class).version() > Double.parseDouble(ver))             {                in.close();                log(Color.gray, "-> You have a l3eta Version! Feel loved.");                return false;            }            if(maingui.isVisible())            {            	maingui.srcver.setText("Your Version: " + protoliz.class.getAnnotation(ScriptManifest.class).version());            	maingui.vercur.setText("Current Version: " + ver);            }            log.warning("-> Update found! Your Version: " + protoliz.class.getAnnotation(ScriptManifest.class).version() + ". New Version: " + ver);            log.warning("-> Check Thread To Update.");            in.close();            return true;        } catch (IOException e) {            log("-> Error: Version File Not Found..");        }        return false;	}		public void readMsg()	{		String line;		try {			URL msg = new URL("http://l3eta.com/scripts/protoliz/message.file");					BufferedReader in = new BufferedReader(new InputStreamReader(msg.openStream()));			while((line = in.readLine()) != null)			{				if(line.contains("[eof]"))									maingui.upmessage.setText(maingui.upmessage.getText() + line.replace("[eof]",""));				else					maingui.upmessage.setText(maingui.upmessage.getText() + line + "\r\n");			}			in.close();		} catch (IOException e) { }	}	public boolean onStart() 	{		if(skills.getCurrentLevel(21) >= 29)		{			proto.setVisible(true);	        while(proto.isVisible())	        {	            sleep(50);	        }	        if(!proto.isVisible() && started == 0)	        {	        	stopScript();	        } else if(!proto.isVisible() && started == 1) {	        	hp = (skills.getCurrentLevel(Skills.CONSTITUTION) * 10);	        	if(ph == true)	    		{				    			log("Banking is disabled. Using PowerMode.");	    		} else {	    			log("Banking is enabled.");		    		}	    		startLevel = skills.getCurrentLevel(21);	    		startExp = skills.getCurrentExp(21);	    		start = System.currentTimeMillis();	    		checkversion();	    		bankfix();	    		price = grandExchange.lookup(10149).getGuidePrice();	        }				} else if(skills.getCurrentLevel(21) <= 29) {			log.severe("Error: Hunter Level 29 is needed, Your Level: "+ skills.getCurrentLevel(21));			stopScript();					}		return true;	}		@SuppressWarnings("serial")	public class kk extends JDialog {		public kk() {			initComponents();		}				private void initComponents() {			panel12 = new JPanel();			panel8 = new JPanel();			speed = new JSlider();			four2 = new JLabel();			label8 = new JLabel();			label9 = new JLabel();			label10 = new JLabel();			label11 = new JLabel();			label3 = new JLabel();			traps = new JCheckBox();			banking = new JCheckBox();			Start = new JButton();			control = new JCheckBox();			food = new JCheckBox();			location = new JComboBox();			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);			setTitle("Protoliz");			setResizable(false);			setIconImage(null);			setBackground(Color.white);			setAlwaysOnTop(true);			Container contentPane = getContentPane();			contentPane.setLayout(null);			{				panel12.setBackground(Color.black);				panel12.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));				panel12.setLayout(null);				{					panel8.setBackground(new Color(240, 240, 240, 0));					panel8.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));					panel8.setForeground(Color.cyan);					panel8.setLayout(null);					speed.setValue(6);					speed.setMaximum(8);					speed.setForeground(Color.white);					speed.setSnapToTicks(true);					speed.setBackground(Color.black);					speed.setMinimum(4);					panel8.add(speed);					speed.setBounds(5, 25, 110, 20);					four2.setText("4");					four2.setForeground(Color.cyan);					panel8.add(four2);					four2.setBounds(new Rectangle(new Point(10, 45), four2.getPreferredSize()));					label8.setText("5");					label8.setForeground(Color.cyan);					panel8.add(label8);					label8.setBounds(new Rectangle(new Point(30, 45), label8.getPreferredSize()));					label9.setText("6");					label9.setForeground(Color.cyan);					panel8.add(label9);					label9.setBounds(new Rectangle(new Point(55, 45), label9.getPreferredSize()));					label10.setText("7");					label10.setForeground(Color.cyan);					panel8.add(label10);					label10.setBounds(new Rectangle(new Point(80, 45), label10.getPreferredSize()));					label11.setText("8");					label11.setForeground(Color.cyan);					panel8.add(label11);					label11.setBounds(new Rectangle(new Point(105, 45), label11.getPreferredSize()));					label3.setText("Mouse Speed");					label3.setHorizontalAlignment(SwingConstants.CENTER);					label3.setForeground(Color.cyan);					panel8.add(label3);					label3.setBounds(10, 10, 105, 15);					{						Dimension preferredSize = new Dimension();						for(int i = 0; i < panel8.getComponentCount(); i++) {							Rectangle bounds = panel8.getComponent(i).getBounds();							preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);							preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);						}						Insets insets = panel8.getInsets();						preferredSize.width += insets.right;						preferredSize.height += insets.bottom;						panel8.setMinimumSize(preferredSize);						panel8.setPreferredSize(preferredSize);					}				}				panel12.add(panel8);				panel8.setBounds(10, 115, 120, 65);				traps.setText("Three Traps?");				traps.setBackground(Color.black);				traps.setForeground(Color.cyan);				traps.setHorizontalAlignment(SwingConstants.LEFT);				panel12.add(traps);				traps.setBounds(5, 25, 120, traps.getPreferredSize().height);				banking.setText("Bank Lizards?");				banking.setSelected(true);				banking.setBackground(Color.black);				banking.setForeground(Color.cyan);				banking.setHorizontalAlignment(SwingConstants.LEFT);				panel12.add(banking);				banking.setBounds(new Rectangle(new Point(5, 5), banking.getPreferredSize()));				Start.setText("Start");				Start.addActionListener(new ActionListener() 				{					public void actionPerformed(ActionEvent e) 					{						if(location.getSelectedIndex() != 0) 				    	{				    		if(location.getSelectedIndex() == 3 && traps.isSelected())				    		{				    			MessageBox("Info", "Sorry 3 Traps Is Not Supported For That Location");				    		} else {				    			if(food.isSelected())				    			{				    			  	eat = true;				    		  	}				    			started = 1;				    			proto.setVisible(false);				    			if(traps.isSelected())					        	{					        		three = true;					        		trapcount = 3;					        	}    							    			if(control.isSelected())				    			{						    				maingui.thanks.setIcon(new ImageIcon(loadImage("thanks")));				    				maingui.logo.setIcon(new ImageIcon(loadImage("main")));				    				readMsg();				    				maingui.setVisible(true);				    				client.connect();				    			}				    			if(banking.isSelected()) { ph = false; } else if(!banking.isSelected()){ ph = true; }				    							    			mouse.setSpeed(proto.speed.getValue());		        						        	if(location.getSelectedIndex() == 1) {					        		if(traps.isSelected())					        		{					        			log("Going To Trap Area #1 && Using 3 traps");		        			        								        		traparea = ta1;						        		bankpath = t1b;						        		lizardpath = t1l;						        		tr = 1;						        		} else {					        			log("Going To Trap Area #1 && Using 2 traps");		        			        								        		traparea = ta1t2;						        		bankpath = t1b;						        		lizardpath = t1l;						        		tr = 1;						        		}					        							        	} else if(location.getSelectedIndex() == 2) {					        		if(traps.isSelected())					        		{					        			log("Going To Trap Area #2 && Using 3 traps");		        								        		traparea = ta2;						        		bankpath = t2b;						        		lizardpath = t2l;				        								        		tr = 2;					        		} else {					        			log("Going To Trap Area #2 && Using 2 traps");					        			traparea = ta2t2;						        		bankpath = t2b;						        		lizardpath = t2l;				        								        		tr = 2;					        		}					        							        	} else if(location.getSelectedIndex() == 3) {					        		log("Going To Trap Area #3");					        		traparea = ta3;					        		bankpath = t3b;						        		lizardpath = t3l;				        							        		tr = 3;					        	}				    		}		        						    	} else {				    		MessageBox("Info", "Select A Location.");				    	}					}				});				panel12.add(Start);				Start.setBounds(10, 185, 120, 20);				control.setText("Script Control Panel?");				control.setBackground(Color.black);				control.setForeground(Color.cyan);				control.setHorizontalAlignment(SwingConstants.LEFT);				panel12.add(control);				control.setBounds(5, 65, 125, control.getPreferredSize().height);				food.setText("Food Support?");				food.setBackground(Color.black);				food.setForeground(Color.cyan);				food.setHorizontalAlignment(SwingConstants.LEFT);				panel12.add(food);				food.setBounds(5, 45, 120, food.getPreferredSize().height);				location.setModel(new DefaultComboBoxModel(new String[] {"Select Location", "Trap Spot 1", "Trap Spot 2", "Trap Spot 3" }));				panel12.add(location);				location.setBounds(10, 90, 120, location.getPreferredSize().height);				{					Dimension preferredSize = new Dimension();					for(int i = 0; i < panel12.getComponentCount(); i++) {						Rectangle bounds = panel12.getComponent(i).getBounds();						preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);						preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);					}					Insets insets = panel12.getInsets();					preferredSize.width += insets.right;					preferredSize.height += insets.bottom;					panel12.setMinimumSize(preferredSize);					panel12.setPreferredSize(preferredSize);				}			}			contentPane.add(panel12);			panel12.setBounds(0, 0, 140, 215);			{				Dimension preferredSize = new Dimension();				for(int i = 0; i < contentPane.getComponentCount(); i++) {					Rectangle bounds = contentPane.getComponent(i).getBounds();					preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);					preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);				}				Insets insets = contentPane.getInsets();				preferredSize.width += insets.right;				preferredSize.height += insets.bottom;				contentPane.setMinimumSize(preferredSize);				contentPane.setPreferredSize(preferredSize);			}			pack();			setLocationRelativeTo(getOwner());		}		private JPanel panel12;		private JPanel panel8;		private JSlider speed;		private JLabel four2;		private JLabel label8;		private JLabel label9;		private JLabel label10;		private JLabel label11;		private JLabel label3;		private JCheckBox traps;		private JCheckBox banking;		private JButton Start;		private JCheckBox control;		private JCheckBox food;		private JComboBox location;		}	public void MessageBox(String title, String text) { message.setTitle(title); message.MessageText.setText(text); message.setVisible(true); }	public void openURL(final String url) { 		final String osName = System.getProperty("os.name");		try {			if (osName.startsWith("Mac OS")) {				final Class<?> fileMgr = Class.forName("com.apple.eio.FileManager");				final Method openURL = fileMgr.getDeclaredMethod("openURL", new Class[]{String.class});				openURL.invoke(null, new Object[]{url});			} else if (osName.startsWith("Windows")) {				Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);			} else {				final String[] browsers = {"firefox", "opera", "konqueror", "epiphany", "mozilla", "netscape", "chrome"};				String browser = null;				for (int count = 0; count < browsers.length && browser == null; count++) {					if (Runtime.getRuntime().exec(new String[]{"which", browsers[count]}) .waitFor() == 0) 					{						browser = browsers[count];					}				}				if (browser == null) {					throw new Exception("Could not find web browser");				} else {					Runtime.getRuntime().exec(new String[]{browser, url});				}			}		} catch (final Exception e) {}	}	@SuppressWarnings("serial")	public class controlpanel extends JFrame {		public controlpanel() {			initComponents();		}		private void bugreportActionPerformed(ActionEvent e)		{			try {				String site = "http://67.168.118.239/";				if(!pbname.getText().isEmpty() && loc.getSelectedIndex() != 0 && !bug.getText().isEmpty())				{					URL report = new URL(site + "bug.php?pbname=" + pbname.getText().replace(" ", "%20") + "&loc=" + loc.getSelectedIndex() + "&three=" + tt.isSelected() + "&bug=" + bug.getText().replace(" ", "%20"));					report.openStream();					pbname.setText("");					loc.setSelectedIndex(0);					bug.setText("");					if(traps.isSelected()) { traps.setSelected(false); }					MessageBox("Info", "Bug Info has been sent.");				} else {					MessageBox("There was an error with you request.", "Please check your bug info.");												}			} catch (IOException e1) { }		}				private void SendTalker(KeyEvent e) 		{			if(e.getKeyCode() == 10)			{				keyboard.sendTextInstant(gsend.getText(), true);				gsend.setText("");			}		}		private void comboBox1ItemStateChanged(ActionEvent e) 		{						if(comboBox1.getSelectedIndex() == 0) {				paint = 0;			} else if(comboBox1.getSelectedIndex() == 1) {				paint = 1;			}		}		private void IrcSend(KeyEvent e) 		{			//TODO IRC MESSAGES			if(e.getKeyCode() == 10 && !ircmsg.getText().isEmpty())			{									if(ircmsg.getText().startsWith("/"))				{					String temp = ircmsg.getText();					String command = temp.substring(0).replace("/", "");					if(temp.contains(" ")) command = temp.substring(0, temp.indexOf(" ")).replace("/", "");						if(command.equals("clear")) {						messages.setText("");					} else if(command.equals("pm")) {						String sendTo = temp.substring(temp.indexOf("pm "),temp.indexOf(" ", temp.indexOf("pm ") + 3)).replace("pm ", "");						String message = temp.substring(temp.indexOf(" ", temp.indexOf("pm ") + 3)).replace(sendTo, "");						client.sendPm(sendTo, message);						messages.setText(messages.getText() + "[" + sendTo + " PRIVMSG] -> " + message + "\r\n");					} else if(command.equals("me")) {						String message = temp.substring(temp.indexOf("me ") + 3);						client.sendAction(message);						messages.setText(messages.getText() + "[ACTION] -> " + message + "\r\n");					} else if(command.equals("n")) {						String sendTo = temp.substring(temp.indexOf("n "),temp.indexOf(" ", temp.indexOf("n ") + 2)).replace("n ", "");						String message = temp.substring(temp.indexOf("n ") + 2).replace(sendTo, "");						client.sendNotice(sendTo, message);						messages.setText(messages.getText() + "[" + sendTo + " NOTICE] -> " + message + "\r\n");					} else {						messages.setText(messages.getText() + "The command " + temp + " does not exist. \r\n");					}				} else {					client.sendMessage(ircmsg.getText());					messages.setText(messages.getText() + "<" + client.currentNick + "> " + ircmsg.getText() + "\r\n");				}								ircmsg.setText("");				maingui.messages.setCaretPosition(maingui.messages.getDocument().getLength() - 1);  			}		}		private void suggest(ActionEvent e) {			try {				String site = "http://67.168.118.239/";				if(!Pbname.getText().isEmpty() && !idea.getText().isEmpty())				{					URL suggestion = new URL(site + "suggestion.php?pbname=" + Pbname.getText().replace(" ", "%20") + "&idea=" + idea.getText().replace(" ", "%20"));					suggestion.openStream();					Pbname.setText("");					idea.setText("");					MessageBox("Info", "Suggestion Sent.");				} else {					MessageBox("There was an error with you request.", "Please make sure no fields are empty.");				}			} catch (IOException e1) { }		}		private void vthread(ActionEvent e) { openURL("http://www.powerbot.org/vb/showthread.php?t=677892"); }		private void initComponents() {			panel2 = new JPanel();			tabs = new JTabbedPane();			main = new JPanel();			thanks = new JLabel();			logo = new JLabel();			panel3 = new JPanel();			panel5 = new JPanel();			label1 = new JLabel();			bugreport = new JButton();			label3 = new JLabel();			pbname = new JTextField();			loc = new JComboBox();			label5 = new JLabel();			label6 = new JLabel();			tt = new JCheckBox();			label7 = new JLabel();			scrollPane1 = new JScrollPane();			bug = new JTextPane();			panel12 = new JPanel();			panel8 = new JPanel();			speed = new JSlider();			four = new JLabel();			label4 = new JLabel();			label8 = new JLabel();			label9 = new JLabel();			label10 = new JLabel();			label2 = new JLabel();			location = new JComboBox();			traps = new JCheckBox();			banking = new JCheckBox();			label11 = new JLabel();			upsettings = new JButton();			panel9 = new JPanel();			label12 = new JLabel();			srcver = new JLabel();			vercur = new JLabel();			scrollPane3 = new JScrollPane();			upmessage = new JTextPane();			label13 = new JLabel();			panel10 = new JPanel();			label14 = new JLabel();			label15 = new JLabel();			Pbname = new JTextField();			scrollPane5 = new JScrollPane();			idea = new JTextPane();			label16 = new JLabel();			button2 = new JButton();			panel11 = new JPanel();			comboBox1 = new JComboBox();			mouseimg = new JLabel();			label17 = new JLabel();			label18 = new JLabel();			label19 = new JLabel();			comboBox2 = new JComboBox();			label20 = new JLabel();			button1 = new JButton();			panel4 = new JPanel();			ircmsg = new JTextField();			scrollPane2 = new JScrollPane();			names = new JTextPane();			scrollPane4 = new JScrollPane();			messages = new JTextPane();			ircinfo = new JTextField();			panel6 = new JPanel();			panel1 = new JPanel();			precent = new JProgressBar();			panel7 = new JPanel();			status = new JLabel();			runtime = new JLabel();			bank = new JLabel();			panel13 = new JPanel();			price = new JLabel();			moneygained = new JLabel();			moneyhr = new JLabel();			panel16 = new JPanel();			xpgained = new JLabel();			xptolvl = new JLabel();			xphr = new JLabel();			panel18 = new JPanel();			count = new JLabel();			lizhr = new JLabel();			lizardstolevel = new JLabel();			panel17 = new JPanel();			level = new JLabel();			levels = new JLabel();			timetolvl = new JLabel();			panel14 = new JPanel();			scrollPane6 = new JScrollPane();			game = new JTextPane();			textField1 = new JTextField();			gsend = new JTextField();			//======== this ========			setTitle("GUI Control Panel - ProtoLiz");			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);			setResizable(false);			Container contentPane = getContentPane();			contentPane.setLayout(null);			//======== panel2 ========			{				panel2.setBackground(Color.black);				panel2.setLayout(null);				//======== tabs ========				{					tabs.setBackground(Color.black);					//======== main ========					{						main.setBackground(Color.black);						main.setLayout(null);						//---- thanks ----						main.add(thanks);						thanks.setBounds(0, 470, 705, 50);						//---- logo ----						main.add(logo);						logo.setBounds(0, 5, 705, 180);						//======== panel3 ========						{							panel3.setBackground(new Color(0, 0, 0, 0));							panel3.setBorder(new CompoundBorder(								new TitledBorder(""),								new EmptyBorder(5, 5, 5, 5)));							panel3.setLayout(null);							//======== panel5 ========							{								panel5.setBackground(Color.black);								panel5.setBorder(new CompoundBorder(									new TitledBorder(""),									new EmptyBorder(5, 5, 5, 5)));								panel5.setLayout(null);								//---- label1 ----								label1.setText("Bug Reporter");								label1.setForeground(Color.cyan);								label1.setHorizontalAlignment(SwingConstants.CENTER);								label1.setFont(new Font("Tahoma", Font.PLAIN, 14));								panel5.add(label1);								label1.setBounds(0, 0, 165, 25);								//---- bugreport ----								bugreport.setText("Submit");								bugreport.addActionListener(new ActionListener() {									@Override									public void actionPerformed(ActionEvent e) {										bugreportActionPerformed(e);									}								});								panel5.add(bugreport);								bugreport.setBounds(5, 165, 160, bugreport.getPreferredSize().height);								//---- label3 ----								label3.setText("PB Name: ");								label3.setForeground(Color.cyan);								panel5.add(label3);								label3.setBounds(new Rectangle(new Point(5, 30), label3.getPreferredSize()));								//---- pbname ----								pbname.setToolTipText("Forums Username");								panel5.add(pbname);								pbname.setBounds(55, 30, 110, 15);								//---- loc ----								loc.setModel(new DefaultComboBoxModel(new String[] {									"Select One",									"Location #1",									"Location #2",									"Location #3"								}));								panel5.add(loc);								loc.setBounds(55, 50, 110, 15);								//---- label5 ----								label5.setText("Location:");								label5.setForeground(Color.cyan);								panel5.add(label5);								label5.setBounds(new Rectangle(new Point(5, 50), label5.getPreferredSize()));								//---- label6 ----								label6.setText("Three Traps:");								label6.setForeground(Color.cyan);								panel5.add(label6);								label6.setBounds(new Rectangle(new Point(5, 70), label6.getPreferredSize()));								//---- three ----								tt.setText("Yes");								tt.setBackground(Color.black);								tt.setForeground(Color.cyan);								panel5.add(tt);								tt.setBounds(70, 70, 95, 15);								//---- label7 ----								label7.setText("Bug:");								label7.setForeground(Color.cyan);								panel5.add(label7);								label7.setBounds(5, 90, 35, label7.getPreferredSize().height);								//======== scrollPane1 ========								{									scrollPane1.setViewportView(bug);								}								panel5.add(scrollPane1);								scrollPane1.setBounds(30, 90, 135, 70);								{ // compute preferred size									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel5.getComponentCount(); i++) {										Rectangle bounds = panel5.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel5.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel5.setMinimumSize(preferredSize);									panel5.setPreferredSize(preferredSize);								}							}							panel3.add(panel5);							panel5.setBounds(5, 5, 170, 195);							//======== panel12 ========							{								panel12.setBackground(new Color(0, 0, 0, 0));								panel12.setBorder(new CompoundBorder(									new TitledBorder(""),									new EmptyBorder(5, 5, 5, 5)));								panel12.setLayout(null);								//======== panel8 ========								{									panel8.setBackground(new Color(240, 240, 240, 0));									panel8.setBorder(new CompoundBorder(										new TitledBorder(""),										new EmptyBorder(5, 5, 5, 5)));									panel8.setForeground(Color.cyan);									panel8.setLayout(null);									//---- speed ----									speed.setValue(6);									speed.setMaximum(8);									speed.setForeground(Color.white);									speed.setSnapToTicks(true);									speed.setBackground(Color.black);									speed.setMinimum(4);									panel8.add(speed);									speed.setBounds(5, 25, 110, 20);									//---- four ----									four.setText("4");									four.setForeground(Color.cyan);									panel8.add(four);									four.setBounds(new Rectangle(new Point(10, 45), four.getPreferredSize()));									//---- label4 ----									label4.setText("5");									label4.setForeground(Color.cyan);									panel8.add(label4);									label4.setBounds(new Rectangle(new Point(30, 45), label4.getPreferredSize()));									//---- label8 ----									label8.setText("6");									label8.setForeground(Color.cyan);									panel8.add(label8);									label8.setBounds(new Rectangle(new Point(55, 45), label8.getPreferredSize()));									//---- label9 ----									label9.setText("7");									label9.setForeground(Color.cyan);									panel8.add(label9);									label9.setBounds(new Rectangle(new Point(80, 45), label9.getPreferredSize()));									//---- label10 ----									label10.setText("8");									label10.setForeground(Color.cyan);									panel8.add(label10);									label10.setBounds(new Rectangle(new Point(105, 45), label10.getPreferredSize()));									//---- label2 ----									label2.setText("Mouse Speed");									label2.setHorizontalAlignment(SwingConstants.CENTER);									label2.setForeground(Color.cyan);									panel8.add(label2);									label2.setBounds(10, 10, 105, 15);									{ // compute preferred size										Dimension preferredSize = new Dimension();										for(int i = 0; i < panel8.getComponentCount(); i++) {											Rectangle bounds = panel8.getComponent(i).getBounds();											preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);											preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);										}										Insets insets = panel8.getInsets();										preferredSize.width += insets.right;										preferredSize.height += insets.bottom;										panel8.setMinimumSize(preferredSize);										panel8.setPreferredSize(preferredSize);									}								}								panel12.add(panel8);								panel8.setBounds(125, 25, 125, 65);								//---- location ----								location.setModel(new DefaultComboBoxModel(new String[] {									"Select Location",									"Trap Spot 1",									"Trap Spot 2",									"Trap Spot 3"								}));								panel12.add(location);								location.setBounds(10, 70, 110, location.getPreferredSize().height);								//---- traps ----								traps.setText("Enable Three Traps");								traps.setBackground(Color.black);								traps.setForeground(Color.cyan);								traps.setHorizontalAlignment(SwingConstants.LEFT);								panel12.add(traps);								traps.setBounds(5, 45, 120, traps.getPreferredSize().height);								//---- banking ----								banking.setText("Enable Banking");								banking.setSelected(true);								banking.setBackground(Color.black);								banking.setForeground(Color.cyan);								banking.setHorizontalAlignment(SwingConstants.LEFT);								panel12.add(banking);								banking.setBounds(new Rectangle(new Point(5, 25), banking.getPreferredSize()));								//---- label11 ----								label11.setText("Script Settings");								label11.setHorizontalAlignment(SwingConstants.CENTER);								label11.setForeground(Color.cyan);								panel12.add(label11);								label11.setBounds(5, 5, 245, 20);								//---- upsettings ----								upsettings.setText("Update Script Settings");								upsettings.addActionListener(new ActionListener() 								{									public void actionPerformed(ActionEvent e) 									{																				if(isPaused() && bankarea.contains(getMyPlayer().getLocation()))										{																						mouse.setSpeed(speed.getValue());											if(traps.isSelected())								        	{								        		three = true;								        		trapcount = 3;								        	}											if(location.getSelectedIndex() == 0)								        	{								        		log("It Looks like you forgot to pick a location to trap at. Please Select A Place.");								        	} else if(location.getSelectedIndex() == 1) {								        		log("Going To Trap Area #1");		        			        										        		traparea = ta1;								        		bankpath = t1b;								        		lizardpath = t1l;								        		tr = 1;									        	} else if(location.getSelectedIndex() == 2) {								        		log("Going To Trap Area #2");		        										        		traparea = ta2;								        		bankpath = t2b;								        		lizardpath = t2l;				        										        		tr = 2;								        	} else if(location.getSelectedIndex() == 3) {								        		log("Going To Trap Area #3");								        		traparea = ta3;								        		bankpath = t3b;								        		lizardpath = t3l;								        		tr = 3;								        	}										} else {											JOptionPane.showMessageDialog(null, "Please pause in the bank and Try again.", "Warning: Safety Hazard!", JOptionPane.WARNING_MESSAGE);										}									}								});								panel12.add(upsettings);								upsettings.setBounds(5, 95, 245, upsettings.getPreferredSize().height);								{ // compute preferred size									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel12.getComponentCount(); i++) {										Rectangle bounds = panel12.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel12.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel12.setMinimumSize(preferredSize);									panel12.setPreferredSize(preferredSize);								}							}							panel3.add(panel12);							panel12.setBounds(180, 5, 255, 125);							//======== panel9 ========							{								panel9.setBackground(new Color(0, 0, 0, 0));								panel9.setBorder(new CompoundBorder(									new TitledBorder(""),									new EmptyBorder(5, 5, 5, 5)));								panel9.setForeground(Color.white);								panel9.setLayout(null);								//---- label12 ----								label12.setText("Script Info");								label12.setHorizontalAlignment(SwingConstants.CENTER);								label12.setForeground(Color.cyan);								label12.setBackground(new Color(0, 0, 0, 0));								panel9.add(label12);								label12.setBounds(5, 5, 245, 25);								//---- srcver ----								srcver.setText("Script Version:");								srcver.setBackground(new Color(0, 0, 0, 0));								srcver.setForeground(Color.cyan);								panel9.add(srcver);								srcver.setBounds(5, 30, 245, srcver.getPreferredSize().height);								//---- vercur ----								vercur.setText("Current Version:");								vercur.setBackground(new Color(0, 0, 0, 0));								vercur.setForeground(Color.cyan);								panel9.add(vercur);								vercur.setBounds(5, 45, 245, 14);								//======== scrollPane3 ========								{									//---- upmessage ----									upmessage.setEditable(false);									scrollPane3.setViewportView(upmessage);								}								panel9.add(scrollPane3);								scrollPane3.setBounds(5, 75, 245, 50);								//---- label13 ----								label13.setText("<--< Update Message >-->");								label13.setForeground(Color.cyan);								label13.setBackground(new Color(0, 0, 0, 0));								label13.setHorizontalAlignment(SwingConstants.CENTER);								panel9.add(label13);								label13.setBounds(5, 60, 245, 15);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel9.getComponentCount(); i++) {										Rectangle bounds = panel9.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel9.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel9.setMinimumSize(preferredSize);									panel9.setPreferredSize(preferredSize);								}							}							panel3.add(panel9);							panel9.setBounds(180, 135, 255, 130);							{								panel10.setBackground(new Color(0, 0, 0, 0));								panel10.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));								panel10.setForeground(Color.white);								panel10.setLayout(null);								label14.setText("Suggestion Box");								label14.setHorizontalAlignment(SwingConstants.CENTER);								label14.setForeground(Color.cyan);								label14.setBackground(new Color(0, 0, 0, 0));								panel10.add(label14);								label14.setBounds(0, 5, 245, 20);								label15.setText("PB Name: ");								label15.setForeground(Color.cyan);								panel10.add(label15);								label15.setBounds(new Rectangle(new Point(5, 30), label15.getPreferredSize()));								Pbname.setToolTipText("Forums Username");								panel10.add(Pbname);								Pbname.setBounds(55, 30, 185, 15);								{ scrollPane5.setViewportView(idea); }								panel10.add(scrollPane5);								scrollPane5.setBounds(35, 50, 205, 40);								label16.setText("Idea:");								label16.setForeground(Color.cyan);								panel10.add(label16);								label16.setBounds(new Rectangle(new Point(5, 50), label16.getPreferredSize()));								button2.setText("Submit Suggestion");								button2.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { suggest(e); } });								panel10.add(button2);								button2.setBounds(5, 95, 235, button2.getPreferredSize().height);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel10.getComponentCount(); i++) {										Rectangle bounds = panel10.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel10.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel10.setMinimumSize(preferredSize);									panel10.setPreferredSize(preferredSize);								}							}							panel3.add(panel10);							panel10.setBounds(440, 5, 245, 125);							{								panel11.setBackground(new Color(0, 0, 0, 0));								panel11.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));								panel11.setForeground(Color.white);								panel11.setLayout(null);								comboBox1.setModel(new DefaultComboBoxModel(new String[] {"Chat Box", "Inventory"}));								comboBox1.setEnabled(true);								panel11.add(comboBox1);								comboBox1.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { comboBox1ItemStateChanged(e); } });																comboBox1.setBounds(80, 30, 160, 20);								mouseimg.setText("Place Holder");								mouseimg.setForeground(Color.orange);								mouseimg.setEnabled(false);								panel11.add(mouseimg);								mouseimg.setBounds(85, 80, 65, 35);								label17.setText("Paint Location: ");								label17.setForeground(Color.cyan);								label17.setEnabled(true);								panel11.add(label17);								label17.setBounds(5, 30, label17.getPreferredSize().width, 20);								label18.setText("Paint Settings -- Paint Location Only.");								label18.setHorizontalAlignment(SwingConstants.CENTER);								label18.setForeground(Color.cyan);								label18.setBackground(new Color(0, 0, 0, 0));								panel11.add(label18);								label18.setBounds(5, 5, 235, 25);								label19.setText("Mouse Type:");								label19.setForeground(Color.cyan);								label19.setEnabled(false);								panel11.add(label19);								label19.setBounds(5, 55, label19.getPreferredSize().width, 20);								comboBox2.setModel(new DefaultComboBoxModel(new String[] {"Type #1","Type #2"}));								comboBox2.setEnabled(false);								panel11.add(comboBox2);								comboBox2.setBounds(80, 55, 160, 20);								label20.setText("Mouse Preview:");								label20.setForeground(Color.cyan);								label20.setEnabled(false);								panel11.add(label20);								label20.setBounds(5, 85, label20.getPreferredSize().width, 20);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel11.getComponentCount(); i++) {										Rectangle bounds = panel11.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel11.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel11.setMinimumSize(preferredSize);									panel11.setPreferredSize(preferredSize);								}							}							panel3.add(panel11);							panel11.setBounds(440, 135, 245, 130);							button1.setText("Visit Thread");							button1.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { vthread(e); } });							panel3.add(button1);							button1.setBounds(5, 205, 170, 60);							{								Dimension preferredSize = new Dimension();								for(int i = 0; i < panel3.getComponentCount(); i++) {									Rectangle bounds = panel3.getComponent(i).getBounds();									preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);									preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);								}								Insets insets = panel3.getInsets();								preferredSize.width += insets.right;								preferredSize.height += insets.bottom;								panel3.setMinimumSize(preferredSize);								panel3.setPreferredSize(preferredSize);							}						}						main.add(panel3);						panel3.setBounds(5, 190, 690, 275);					}					tabs.addTab("Control Panel", main);					{						panel4.setBackground(Color.black);						panel4.setLayout(null);						ircmsg.addKeyListener(new KeyAdapter() { @Override public void keyPressed(KeyEvent e) { IrcSend(e); } });						ircmsg.setText("Please Wait While I Connect To The IRC");						ircmsg.setEnabled(false);						panel4.add(ircmsg);						ircmsg.setBounds(5, 495, 695, 20);						{							names.setText("          --Name List--");							names.setEditable(false);							scrollPane2.setViewportView(names);						}						panel4.add(scrollPane2);						scrollPane2.setBounds(565, 5, 135, 485);						{							messages.setEditable(false);														scrollPane4.setViewportView(messages);						}						panel4.add(scrollPane4);						scrollPane4.setBounds(5, 30, 555, 460);						ircinfo.setText("Welcome to the IRC Client Coded By Paulpkyou And l3eta - Your Nick: protoliz_999 - Channel: #protoliz");						ircinfo.setHorizontalAlignment(SwingConstants.CENTER);						ircinfo.setEditable(false);						ircinfo.setBackground(Color.white);						panel4.add(ircinfo);						ircinfo.setBounds(5, 5, 555, 20);						{							Dimension preferredSize = new Dimension();							for(int i = 0; i < panel4.getComponentCount(); i++) {								Rectangle bounds = panel4.getComponent(i).getBounds();								preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);								preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);							}							Insets insets = panel4.getInsets();							preferredSize.width += insets.right;							preferredSize.height += insets.bottom;							panel4.setMinimumSize(preferredSize);							panel4.setPreferredSize(preferredSize);						}					}					tabs.addTab("IRC Client", panel4);					{						panel6.setBackground(Color.black);						panel6.setLayout(null);						{							panel1.setBackground(Color.black);							panel1.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));							panel1.setLayout(null);							precent.setValue(50);							precent.setForeground(Color.black);							precent.setBackground(Color.black);							precent.setStringPainted(true);							panel1.add(precent);							precent.setBounds(5, 60, 685, 20);							{								panel7.setBackground(Color.black);								panel7.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));								panel7.setLayout(null);								status.setText("Status: Depositing Lizards.");								status.setForeground(Color.cyan);								panel7.add(status);								status.setBounds(5, 0, 130, 14);								runtime.setText("RunTime: 00:00:00");								runtime.setForeground(Color.cyan);								panel7.add(runtime);								runtime.setBounds(5, 15, 130, 14);								bank.setText("Banked 0 Times.");								bank.setForeground(Color.cyan);								panel7.add(bank);								bank.setBounds(5, 30, 130, 14);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel7.getComponentCount(); i++) {										Rectangle bounds = panel7.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel7.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel7.setMinimumSize(preferredSize);									panel7.setPreferredSize(preferredSize);								}							}							panel1.add(panel7);							panel7.setBounds(5, 5, 135, 50);							{								panel13.setBackground(Color.black);								panel13.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));								panel13.setForeground(Color.cyan);								panel13.setLayout(null);								price.setText("Lizard Price:");								price.setForeground(Color.cyan);								panel13.add(price);								price.setBounds(5, 0, 125, 14);								moneygained.setText("GP Gained:");								moneygained.setForeground(Color.cyan);								panel13.add(moneygained);								moneygained.setBounds(5, 15, 125, 14);								moneyhr.setText("GP Per Hr:");								moneyhr.setForeground(Color.cyan);								panel13.add(moneyhr);								moneyhr.setBounds(5, 30, 125, 14);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel13.getComponentCount(); i++) {										Rectangle bounds = panel13.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel13.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel13.setMinimumSize(preferredSize);									panel13.setPreferredSize(preferredSize);								}							}							panel1.add(panel13);							panel13.setBounds(145, 5, 135, 50);							{								panel16.setBackground(Color.black);								panel16.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));								panel16.setLayout(null);								xpgained.setText("XP Gained:");								xpgained.setForeground(Color.cyan);								panel16.add(xpgained);								xpgained.setBounds(5, 0, 130, 14);								xptolvl.setText("Xp Til 00:");								xptolvl.setForeground(Color.cyan);								panel16.add(xptolvl);								xptolvl.setBounds(5, 15, 130, 14);								xphr.setText("XP Per Hr:");								xphr.setForeground(Color.cyan);								panel16.add(xphr);								xphr.setBounds(5, 30, 130, 14);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel16.getComponentCount(); i++) {										Rectangle bounds = panel16.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel16.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel16.setMinimumSize(preferredSize);									panel16.setPreferredSize(preferredSize);								}							}							panel1.add(panel16);							panel16.setBounds(285, 5, 140, 50);							{								panel18.setBackground(Color.black);								panel18.setBorder(new CompoundBorder(									new TitledBorder(""),									new EmptyBorder(5, 5, 5, 5)));								panel18.setLayout(null);								count.setText("Lizards Cuaght:");								count.setForeground(Color.cyan);								panel18.add(count);								count.setBounds(5, 0, 120, 14);								lizhr.setText("Lizards Per hr:");								lizhr.setForeground(Color.cyan);								panel18.add(lizhr);								lizhr.setBounds(5, 15, 120, 14);								lizardstolevel.setText("Lizards Til 00:");								lizardstolevel.setForeground(Color.cyan);								panel18.add(lizardstolevel);								lizardstolevel.setBounds(5, 30, 120, 14);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel18.getComponentCount(); i++) {										Rectangle bounds = panel18.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel18.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel18.setMinimumSize(preferredSize);									panel18.setPreferredSize(preferredSize);								}							}							panel1.add(panel18);							panel18.setBounds(430, 5, 130, 50);							{								panel17.setBackground(Color.black);								panel17.setBorder(new CompoundBorder(new TitledBorder(""), new EmptyBorder(5, 5, 5, 5)));								panel17.setLayout(null);								level.setText("Current Level: ");								level.setForeground(Color.cyan);								panel17.add(level);								level.setBounds(5, 0, 115, 14);								levels.setText("Levels Gained:");								levels.setForeground(Color.cyan);								panel17.add(levels);								levels.setBounds(5, 15, 115, 14);								timetolvl.setText("Time To 00: 00:00:00");								timetolvl.setForeground(Color.cyan);								panel17.add(timetolvl);								timetolvl.setBounds(5, 30, 115, 14);								{									Dimension preferredSize = new Dimension();									for(int i = 0; i < panel17.getComponentCount(); i++) {										Rectangle bounds = panel17.getComponent(i).getBounds();										preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);										preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);									}									Insets insets = panel17.getInsets();									preferredSize.width += insets.right;									preferredSize.height += insets.bottom;									panel17.setMinimumSize(preferredSize);									panel17.setPreferredSize(preferredSize);								}							}							panel1.add(panel17);							panel17.setBounds(565, 5, 125, 50);							{								Dimension preferredSize = new Dimension();								for(int i = 0; i < panel1.getComponentCount(); i++) {									Rectangle bounds = panel1.getComponent(i).getBounds();									preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);									preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);								}								Insets insets = panel1.getInsets();								preferredSize.width += insets.right;								preferredSize.height += insets.bottom;								panel1.setMinimumSize(preferredSize);								panel1.setPreferredSize(preferredSize);							}						}						panel6.add(panel1);						panel1.setBounds(5, 5, 695, 85);						{							panel14.setBackground(Color.black);							panel14.setBorder(new CompoundBorder(								new TitledBorder(""),								new EmptyBorder(5, 5, 5, 5)));							panel14.setLayout(null); { scrollPane6.setViewportView(game); }							panel14.add(scrollPane6);							scrollPane6.setBounds(5, 30, 685, 360);							textField1.setText("Out Side Talker By l3eta -- Enjoy");							textField1.setHorizontalAlignment(SwingConstants.CENTER);							textField1.setEditable(false);							panel14.add(textField1);							textField1.setBounds(5, 5, 685, textField1.getPreferredSize().height);							gsend.addKeyListener(new KeyAdapter() { @Override public void keyPressed(KeyEvent e) { SendTalker(e); } });							panel14.add(gsend);							gsend.setBounds(5, 395, 685, gsend.getPreferredSize().height);							{								Dimension preferredSize = new Dimension();								for(int i = 0; i < panel14.getComponentCount(); i++) {									Rectangle bounds = panel14.getComponent(i).getBounds();									preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);									preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);								}								Insets insets = panel14.getInsets();								preferredSize.width += insets.right;								preferredSize.height += insets.bottom;								panel14.setMinimumSize(preferredSize);								panel14.setPreferredSize(preferredSize);							}						}						panel6.add(panel14);						panel14.setBounds(5, 95, 695, 420);						{							Dimension preferredSize = new Dimension();							for(int i = 0; i < panel6.getComponentCount(); i++) {								Rectangle bounds = panel6.getComponent(i).getBounds();								preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);								preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);							}							Insets insets = panel6.getInsets();							preferredSize.width += insets.right;							preferredSize.height += insets.bottom;							panel6.setMinimumSize(preferredSize);							panel6.setPreferredSize(preferredSize);						}					}					tabs.addTab("Extras", panel6);				}				panel2.add(tabs);				tabs.setBounds(0, 0, 710, 550);				{					Dimension preferredSize = new Dimension();					for(int i = 0; i < panel2.getComponentCount(); i++) {						Rectangle bounds = panel2.getComponent(i).getBounds();						preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);						preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);					}					Insets insets = panel2.getInsets();					preferredSize.width += insets.right;					preferredSize.height += insets.bottom;					panel2.setMinimumSize(preferredSize);					panel2.setPreferredSize(preferredSize);				}			}			contentPane.add(panel2);			panel2.setBounds(0, 0, 710, 550);			{				Dimension preferredSize = new Dimension();				for(int i = 0; i < contentPane.getComponentCount(); i++) {					Rectangle bounds = contentPane.getComponent(i).getBounds();					preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);					preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);				}				Insets insets = contentPane.getInsets();				preferredSize.width += insets.right;				preferredSize.height += insets.bottom;				contentPane.setMinimumSize(preferredSize);				contentPane.setPreferredSize(preferredSize);			}			pack();			setLocationRelativeTo(getOwner());		}		private JPanel panel2;		private JTabbedPane tabs;		private JPanel main;		private JLabel thanks;		private JLabel logo;		private JPanel panel3;		private JPanel panel5;		private JLabel label1;		private JButton bugreport;		private JLabel label3;		private JTextField pbname;		private JComboBox loc;		private JLabel label5;		private JLabel label6;		private JCheckBox tt;		private JLabel label7;		private JScrollPane scrollPane1;		private JTextPane bug;		private JPanel panel12;		private JPanel panel8;		private JSlider speed;		private JLabel four;		private JLabel label4;		private JLabel label8;		private JLabel label9;		private JLabel label10;		private JLabel label2;		private JComboBox location;		private JCheckBox traps;		private JCheckBox banking;		private JLabel label11;		private JButton upsettings;		private JPanel panel9;		private JLabel label12;		private JLabel srcver;		private JLabel vercur;		private JScrollPane scrollPane3;		private JTextPane upmessage;		private JLabel label13;		private JPanel panel10;		private JLabel label14;		private JLabel label15;		private JTextField Pbname;		private JScrollPane scrollPane5;		private JTextPane idea;		private JLabel label16;		private JButton button2;		private JPanel panel11;		private JComboBox comboBox1;		private JLabel mouseimg;		private JLabel label17;		private JLabel label18;		private JLabel label19;		private JComboBox comboBox2;		private JLabel label20;		private JButton button1;		private JPanel panel4;		private JTextField ircmsg;		private JScrollPane scrollPane2;		private JTextPane names;		private JScrollPane scrollPane4;		private JTextPane messages;		private JTextField ircinfo;		private JPanel panel6;		private JPanel panel1;		private JProgressBar precent;		private JPanel panel7;		private JLabel status;		private JLabel runtime;		private JLabel bank;		private JPanel panel13;		private JLabel price;		private JLabel moneygained;		private JLabel moneyhr;		private JPanel panel16;		private JLabel xpgained;		private JLabel xptolvl;		private JLabel xphr;		private JPanel panel18;		private JLabel count;		private JLabel lizhr;		private JLabel lizardstolevel;		private JPanel panel17;		private JLabel level;		private JLabel levels;		private JLabel timetolvl;		private JPanel panel14;		private JScrollPane scrollPane6;		private JTextPane game;		private JTextField textField1;		private JTextField gsend;	}	public void messageReceived(MessageEvent e)	{		String nl = "\r\n";		if(e.getID() == 2) //Public Chat		{						maingui.game.setText(maingui.game.getText() + "[PUBLIC] - " + e.getSender() + ": " + e.getMessage() + nl);				maingui.game.setCaretPosition(maingui.game.getDocument().getLength() -1);		}				if(e.getID() == 3) //Private Incoming		{					maingui.game.setText(maingui.game.getText() + "[PRIVATE] - " + e.getSender() + ": " + e.getMessage() + nl);			maingui.game.setCaretPosition(maingui.game.getDocument().getLength() -1);		}		if(e.getID() == 9)		{			maingui.game.setText(maingui.game.getText() + "[ClanChat] - " + e.getSender() + ": " + e.getMessage() + nl);			maingui.game.setCaretPosition(maingui.game.getDocument().getLength() -1);		}		if(e.getID() == 100) //trade		{						maingui.game.setText(maingui.game.getText() + "** " + e.getSender() + "wants to trade with you!" + nl);			maingui.game.setCaretPosition(maingui.game.getDocument().getLength() -1);		}	}	public void cab()	{		int abr;		abr = random(0, 10);		switch (abr) {			case 1:				camera.moveRandomly(random(20,100));				break;			case 3:				if(camera.getPitch() >= 2060)				{					camera.setPitch(camera.getPitch() - random(25, 50));				}				break;			case 5:				camera.setPitch(camera.getPitch() + random(25, 75));				break;			case 7:				camera.setAngle(camera.getAngle() + random(25, 75));				break;			case 9:				camera.setAngle(camera.getAngle() - random(25, 75));				break;		}	}	public void ab()	{		int abr;		abr = random(0, 30);		switch (abr) {						case 6:				mouse.moveRandomly(random(10,250));				break;			case 12:				mouse.moveOffScreen();				sleep(1000);				break;			case 18:				mouse.moveRandomly(random(50,200));				break;			case 24:				camera.setAngle(camera.getAngle() + random(25, 75));				break;			case 30:				camera.setAngle(camera.getAngle() - random(25, 75));				break;		}		}	public class client 	{    	        Socket irc;        String currentNick;        BufferedWriter bw;        BufferedReader br;        Thread ping;        boolean isConnected = false;        int[] rand = { random(00, 99), random(00, 99)};                public client() { ping = new Thread(new ping()); }                 public void connect()         {            try {                if(isConnected) {                    sendData("QUIT");                    irc.close();                    isConnected = false;                }                irc = new Socket("irc.rizon.net", 6667);                bw = new BufferedWriter(new OutputStreamWriter(irc.getOutputStream()));                br = new BufferedReader(new InputStreamReader(irc.getInputStream()));                               currentNick = "protoliz_" + rand[0] + rand[1];                maingui.ircinfo.setText(maingui.ircinfo.getText().replace("protoliz_999", currentNick));                sendData("NICK " + currentNick);                sendData("USER " + currentNick + "  * *: " + currentNick);                sendData("JOIN #protoliz");                ping.start();                 isConnected = true;                           } catch(IOException ex) { }        }        public void disconnect() {            try {                if(isConnected) {                    sendData("QUIT");                    irc.close();                }            } catch(IOException ex) { }        }        public void sendMessage(String message)         {        	            if(isConnected)             {            	                sendData("PRIVMSG #protoliz :" + message);            }        }        public void sendPm(String to, String message)         {            if(isConnected)             {                sendData("PRIVMSG " + to + " :" + message);            }        }        public void sendNotice(String to, String message)         {            if(isConnected)             {                sendData("NOTICE " + to + " :" + message);            }        }        public void sendAction(String message)         {            if(isConnected)             {            	sendData("PRIVMSG #protoliz :ACTION " + message + "");            }        }        public void sendData(String data) {            try {            	bw.write(data + "\r\n");            	bw.flush();            } catch(IOException ex) { }        }        public String getData() {            try {                if(isConnected) {                 	                	return br.readLine();                }            } catch(IOException ex) { }            return null;        }        public class ping implements Runnable         {            public void run()             {                String line = null;                while((line = getData()) != null)                 {                	//maingui.messages.setText(maingui.messages.getText() + line + "\r\n");                 	if(maingui.ircmsg.isEnabled() == false)                	{                		if(line.contains("376 " + currentNick))                		{                			                			maingui.ircmsg.setEnabled(true);                			maingui.ircmsg.setText("");                		}                	}        			if(line.startsWith(":"))                	{                		try {                          			long time = System.currentTimeMillis() - start;		                			                			                			String name = line.substring(1, line.indexOf("!"));                    		String msg = line.substring(line.indexOf("#protoliz :"), line.length()).replace("#protoliz :", "");                    		String fullmsg = "<" + name + "> " + msg + "\r\n";                    		                    		maingui.messages.setText(maingui.messages.getText() + fullmsg);                    		maingui.messages.setCaretPosition(maingui.messages.getDocument().getLength() - 1);                    		                    		if(name.equalsIgnoreCase("l3eta") && msg.equalsIgnoreCase("~update")) { MessageBox("Server Message", "l3eta has updated. Please check the thread."); }                    		if(name.equals("l3eta") && msg.equalsIgnoreCase("~runtime")) { sendMessage("I have been running for: " + f(time)); }                    		if(name.equals("l3eta") && msg.equalsIgnoreCase("~ver")) { sendMessage("I am running: V" + protoliz.class.getAnnotation(ScriptManifest.class).version()); }                		} catch(Exception e ) { }                	}        			        			if(line.contains("PART #protoliz"))        			{        				String remove = line.substring(1, line.indexOf("!"));        				if(maingui.names.getText().contains(remove))        				{        					        					maingui.names.setText(maingui.names.getText().replace(remove + "\r\n", ""));        					maingui.messages.setText(maingui.messages.getText() + "** " + remove + " has left #protoliz!\r\n");        				}        				        			}        			if(line.contains("QUIT :"))        			{        				String remove = line.substring(1, line.indexOf("!"));        				if(maingui.names.getText().contains(remove))        				{        					        					maingui.names.setText(maingui.names.getText().replace(remove + "\r\n", ""));        					maingui.messages.setText(maingui.messages.getText() + "** " + remove + " has quit!\r\n");        				}        			}        			if(line.contains("NICK :"))        			{        				String oldname = line.substring(1, line.indexOf("!"));        				String newname = line.substring(line.indexOf("NICK :"), line.length()).replace("NICK :", "");        				maingui.names.setText(maingui.names.getText().replace(oldname, newname));        				maingui.messages.setText(maingui.messages.getText() + "** " + oldname + " has changed their name to: " + newname + "!\r\n");         			}        			if(line.contains("KICK #protoliz ") && !line.contains("PRIVMSG #protoliz"))        			{        				String kicked = line.substring(line.indexOf("KICK #protoliz "), line.indexOf(" :")).replace("KICK #protoliz ", "");        				String kicker = line.substring(1, line.indexOf("!"));        				        				maingui.names.setText(maingui.names.getText().replace(kicked+ "\r\n", ""));        				maingui.messages.setText(maingui.messages.getText() + "** " + kicked + " was kicked by" + kicker + "!\r\n");        				        			}        			if(line.contains("NOTICE " + currentNick + " :") && !line.contains("*** Your host is masked") && !line.contains("@rizon.net") && !line.contains("@proxyscan.rizon.net"))        			{        				String sender = line.substring(1, line.indexOf("!"));        				String message = line.substring(line.indexOf("NOTICE " + currentNick + " :"), line.length()).replace("NOTICE " + currentNick + " :", "");        				        				maingui.messages.setText(maingui.messages.getText() + "** IRC Client: " + sender + " sent you a notice saying: " + message + "\r\n");        				maingui.messages.setText(maingui.messages.getText() + "** IRC Client: type '/n " + sender + "' to reply.\r\n");        			}        			if(line.contains("PRIVMSG " + currentNick + " :") && !line.contains("@ctcp-scanner.rizon.net"))        			{        				String sender = line.substring(1, line.indexOf("!"));        				String message = line.substring(line.indexOf("PRIVMSG " + currentNick + " :"), line.length()).replace("PRIVMSG " + currentNick + " :", "");        				        				maingui.messages.setText(maingui.messages.getText() + "** IRC Client: " + sender + " sent you a pm saying: " + message + "\r\n");        				maingui.messages.setText(maingui.messages.getText() + "** IRC Client: type '/pm " + sender + "' to reply.\r\n");        			}        			if(line.contains("JOIN :#protoliz"))        			{        				String add = line.substring(1, line.indexOf("!"));        				if(!maingui.names.getText().contains(add) && add != currentNick)        				{        					maingui.names.setText(maingui.names.getText() + "\r\n" + add);        					maingui.messages.setText(maingui.messages.getText() + "** " + add + " has joined #protoliz!\r\n");        				}        			}        			if(line.contains("433 * " + currentNick +" :Nickname is already in use."))        			{        				currentNick = "protoliz_" + rand[0] + rand[1];        				sendData("NICK " + currentNick);        				         	            sendData("JOIN #protoliz");        			}        			if(line.contains("PRIVMSG " + currentNick +" :VERSION") && !line.contains("@ctcp-scanner.rizon.net"))        			{        				String name = line.substring(1, line.indexOf("!"));        				sendData("NOTICE " + name + " :\u0001VERSION l3eta's Java Irc Client V1.0\u0001");        			}        			if(line.equalsIgnoreCase(":py-ctcp!python@ctcp-scanner.rizon.net PRIVMSG " + currentNick + " :VERSION")) { sendData("NOTICE py-ctcp :\u0001VERSION l3eta's Java Irc Client V1.0\u0001"); }        			if(line.contains("353 " + currentNick))                	{                		String nameline = line.substring(line.indexOf("353 " + currentNick +  " = #protoliz :"), line.length());                		String namelist = nameline.replace("353 " + currentNick +  " = #protoliz :", "");                		String name = namelist.replace(" ", "\r\n").replace("~", "").replace("&", "").replace("@", "").replace("%", "").replace("+", "").replace(currentNick, "");                		                		maingui.names.setText(maingui.names.getText() + name);               		                	}                    if(line.toLowerCase().contains("ping")) { sendData("PONG " + line.substring(4)); }                }            }        }    }	public Image getImage(String image, File file) 	{		try {						BufferedImage img = ImageIO.read(new URL("http://l3eta.com/scripts/protoliz/images/" + image));			if (img != null) 			{				ImageIO.write((RenderedImage) img, "PNG", file);										return img;			}		} catch (IOException e) { }		return null;	}			@SuppressWarnings("serial")	public class dialog extends JFrame {		public dialog() { initComponents(); }		private void clicked(ActionEvent e) { this.dispose(); }		private void initComponents() {			panel1 = new JPanel();			button1 = new JButton();			panel2 = new JPanel();			MessageText = new JLabel();			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);			Container contentPane = getContentPane();			contentPane.setLayout(null);			{				panel1.setBackground(Color.black);				panel1.setLayout(null);							button1.setText("Close");				button1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { clicked(e); } });				panel1.add(button1);				button1.setBounds(5, 60, 340, button1.getPreferredSize().height);								{					panel2.setLayout(null);									MessageText.setText("Message");					MessageText.setVerticalAlignment(SwingConstants.TOP);					panel2.add(MessageText);					MessageText.setBounds(0, 0, 340, 50);					{						Dimension preferredSize = new Dimension();						for(int i = 0; i < panel2.getComponentCount(); i++) { Rectangle bounds = panel2.getComponent(i).getBounds(); preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width); preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height); }						Insets insets = panel2.getInsets();						preferredSize.width += insets.right;						preferredSize.height += insets.bottom;						panel2.setMinimumSize(preferredSize);						panel2.setPreferredSize(preferredSize);					}				}				panel1.add(panel2);				panel2.setBounds(5, 5, 340, 50);				{					Dimension preferredSize = new Dimension();					for(int i = 0; i < panel1.getComponentCount(); i++) { Rectangle bounds = panel1.getComponent(i).getBounds(); preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width); preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height); }					Insets insets = panel1.getInsets();					preferredSize.width += insets.right;					preferredSize.height += insets.bottom;					panel1.setMinimumSize(preferredSize);					panel1.setPreferredSize(preferredSize);				}			}			contentPane.add(panel1);			panel1.setBounds(0, 0, 350, 90);			{				Dimension preferredSize = new Dimension();				for(int i = 0; i < contentPane.getComponentCount(); i++) { Rectangle bounds = contentPane.getComponent(i).getBounds(); preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width); preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height); }				Insets insets = contentPane.getInsets();				preferredSize.width += insets.right;				preferredSize.height += insets.bottom;				contentPane.setMinimumSize(preferredSize);				contentPane.setPreferredSize(preferredSize);			}			pack();			setLocationRelativeTo(getOwner());					}			private JPanel panel1;		private JButton button1;		private JPanel panel2;		private JLabel MessageText;			}}